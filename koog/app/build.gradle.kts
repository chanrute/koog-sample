/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/9.0.0/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
    alias(libs.plugins.kotlin.jvm)

    // Apply the application plugin to add support for building a CLI application in Java.
    application

    // Add Kotlin serialization plugin for Koog API support
    kotlin("plugin.serialization") version "2.2.0"
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    // Add JetBrains repository for Koog framework
    maven {
        url = uri("https://packages.jetbrains.team/maven/p/grazi/grazie-platform-public")
    }
}

dependencies {
    // Use the Kotlin JUnit 5 integration.
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit5")

    // Use the JUnit 5 integration.
    testImplementation(libs.junit.jupiter.engine)

    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    // This dependency is used by the application.
    implementation(libs.guava)

        // Koog - Core framework
    implementation("ai.koog:koog-agents:0.4.1")
    implementation("ai.koog:embeddings-llm:0.4.1")
    implementation("ai.koog:embeddings-base:0.4.1")
    implementation("ai.koog:rag-base:0.4.1")
    implementation("ai.koog:vector-storage:0.4.1")

    // Koog Prompt API and LLM clients
    implementation("ai.koog:prompt-executor-anthropic-client:0.4.1")
    implementation("ai.koog:prompt-executor-openai-client:0.4.1")
    implementation("ai.koog:prompt-llm:0.4.1")
    implementation("ai.koog:prompt-model:0.4.1")

    // Environment variables support
    implementation("io.github.cdimascio:dotenv-kotlin:6.4.1")

    // HTTP client for PDF download and API calls
    implementation("io.ktor:ktor-client-core:2.3.7")
    implementation("io.ktor:ktor-client-cio:2.3.7")
    implementation("io.ktor:ktor-client-content-negotiation:2.3.7")
    implementation("io.ktor:ktor-serialization-kotlinx-json:2.3.7")

    // JSON serialization
    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.2")

    // PDF processing
    implementation("org.apache.pdfbox:pdfbox:3.0.1")

    // Coroutines
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3")
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = "org.example.AppKt"
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
